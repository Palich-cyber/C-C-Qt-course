#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <ctype.h>

#define ROOM_COUNT 3
#define GREEN_ROOM 0
#define BLUE_ROOM  1
#define RED_ROOM   2

int choiceMenu ();
int setSeed();
int isNotEqual(int randomValue, int *buff);
int generateRoom(int *roomNums);
int defineRoom(int roomNum);
int isCorrectInputString(const char *inputString, int minValue, int maxValue);
int isImpasse();
int *toMove(int *cordinateValue, int *roomNums);

int main (){

    int coordinate[2];
    int roomNums[ROOM_COUNT];
    coordinate[0] = 0;              // 1 - currentNumRoom
    coordinate[1] = 0;              // 2 - currentChoice

    if (choiceMenu()){
        generateRoom(roomNums);
        toMove(coordinate, roomNums);
        while (coordinate[1] > 0){
            toMove(coordinate, roomNums);
        }
    }

    return 0;
}

int choiceMenu (){

    int choice;

    printf ("---------------WELCOME-------------\n"
            "-----------------TO----------------\n"
            "-------------LABIRINTH-------------\n\n"
            "CHOICE MENU:\n"
            "1 - ENTER\n"
            "2 - EXIT\n"
            "What would you doing?\n");

    scanf("%d", &choice);

    if (choice == 1) return 1;
    else if (choice == 2){
        printf ("---------------GOODBYE-------------\n");
        return 0;
    }
    else{
        printf ("Invalid value. Try again enter 1 or 2.\n");
        return 0;
    }
}

// Function for seed start point for a generation random values
int setSeed(){

    struct timespec spec;

    clock_gettime(CLOCK_REALTIME, &spec);
    srand (spec.tv_nsec);

    return 0;
}

int isNotEqual(int randomValue , int *buff){

    for (int i = 0; i < ROOM_COUNT; i++){
        if (buff[i] == randomValue) return 1;
        else continue;
    }

    return 0;
}

int generateRoom(int *roomNums){

    int randomValue;

    setSeed();

    for (int i = 0; i < ROOM_COUNT; i++)
        roomNums[i] = ROOM_COUNT;

    for (int i = 0; i < ROOM_COUNT; i++){
        randomValue = rand()%ROOM_COUNT;
        while (isNotEqual(randomValue, roomNums)){
            randomValue = rand()%ROOM_COUNT;
        }
        roomNums[i] = randomValue;
    }

    return 0;
}

int defineRoom(int roomNum){

    switch (roomNum)
    {
        case GREEN_ROOM:
            printf ("        WELCOME TO GREEN ROOM        \n");
            break;
        case BLUE_ROOM:
            printf ("         WELCOME TO BLUE ROOM        \n");
            break;
        case RED_ROOM:
            printf ("          WELCOME TO RED ROOM        \n");
            break;
    }

    int choice = roomMenu();
    return choice;
}

int roomMenu(){
    printf ("1 - forward\n"
            "2 - right\n"
            "3 - left\n"
            "4 - back\n"
            "What would you doing?\n");

    int  choice = -1;
    char inputString[4];

    while (choice == -1){
        scanf ("%s", inputString);
        choice = isCorrectInputString(inputString, 1, 4);
    }

    return choice;
}

// Value validation function
/* Input:
   inputString - string for validtion
   minValue    - minimum value
   maxValue    - maximum value
   Output:
   >0  - value of inputString;
   -1  - if inputString value is an invalid
*/
int isCorrectInputString(const char *inputString, int minValue, int maxValue){

    int correct =  1,
        i       =  0,
        value   = -1;

    while (inputString[i] != '\0'){
        if (!isdigit(inputString[i])) correct = 0;
        i++;
    }

    if (correct){
        value = atoi(inputString);
        if (value < minValue || value > maxValue){
            value = -1;
            printf("Invalid values. Please try again enter.\n");
        }
    }

    return value;
}

int isImpasse(){

    printf ("          IMPASSE        \n");
    int choice = roomMenu();
    if (choice == 4) return 1;
    else return 0;
}

int *toMove(int *cordinateValue, int *roomNums){

    switch (cordinateValue[0])
    {
        case 0:
            switch (cordinateValue[1])
            {
                case 0:
                    cordinateValue[1] = defineRoom(roomNums[0]);
                    break;
                case 1:
                    printf ("          MINE!!!        \n"
                            "        YOU LOOSE        \n"
                            "        GAME OVER        \n");
                    cordinateValue[1] = -1;
                    break;
                case 2:
                    if (isImpasse()) cordinateValue[1] = defineRoom(roomNums[0]);
                    break;
                case 3:
                    cordinateValue[1] = defineRoom(roomNums[1]);
                    cordinateValue[0] = 1;
                    break;
                case 4:
                    if (choiceMenu()){
                        cordinateValue[1] = defineRoom(roomNums[0]);
                        cordinateValue[0] = 0;
                    }
                    else {
                        cordinateValue[1] = -1;
                    }
                    break;
            }
            break;

        case 1:
            switch (cordinateValue[1])
            {
                case 0:
                    cordinateValue[1] = defineRoom(roomNums[1]);
                    break;
                case 1:
                    if (isImpasse()) cordinateValue[1] = defineRoom(roomNums[1]);
                    break;
                case 2:
                    cordinateValue[1] = defineRoom(roomNums[2]);
                    cordinateValue[0] = 2;
                    break;
                case 3:
                    if (isImpasse()) cordinateValue[1] = defineRoom(roomNums[1]);
                    break;
                case 4:
                    cordinateValue[1] = defineRoom(roomNums[0]);
                    cordinateValue[0] = 0;
                    break;
            }
            break;

        case 2:
            switch (cordinateValue[1])
            {
                case 0:
                    cordinateValue[1] = defineRoom(roomNums[2]);
                    break;
                case 1:
                    printf ("          CONGRATULATION           \n"
                            "          YOU ARE WINNER!!!        \n");
                    cordinateValue[1] = -2;
                    break;
                case 2:
                    printf ("          MINE!!!        \n"
                            "        YOU LOOSE        \n"
                            "        GAME OVER        \n");
                    cordinateValue[1] = -1;
                    break;
                case 3:
                    if (isImpasse()) cordinateValue[1] = defineRoom(roomNums[2]);
                    break;
                case 4:
                    cordinateValue[1] = defineRoom(roomNums[1]);
                    cordinateValue[0] = 1;
                    break;
            }
            break;
    }

    return cordinateValue;
}
